// <auto-generated />
using System;
using App.BookingOnline.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace App.BookingOnline.Data.Migrations
{
    [DbContext(typeof(BookingOnlineDbContext))]
    [Migration("20211221034613_initDbContext")]
    partial class initDbContext
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("App.BookingOnline.Data.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("C_Org_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EnrolledDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Identity.AspRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("Protected")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "672db3b8-c436-49bd-8172-bdb6ad6d6148",
                            ConcurrencyStamp = "2c081fa1-9666-460d-85f4-a4c61a4788a6",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Admin",
                            IsActive = true,
                            Name = "admin",
                            NormalizedName = "ADMIN",
                            Protected = true
                        },
                        new
                        {
                            Id = "db29c853-03ea-4328-9553-83676192aeed",
                            ConcurrencyStamp = "fd5b7ef0-a30e-4f07-9659-7e2170836105",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Nhân viên",
                            IsActive = true,
                            Name = "employee",
                            NormalizedName = "EMPLOYEE",
                            Protected = true
                        },
                        new
                        {
                            Id = "3e1ce2a6-e835-41ff-ab54-11dc1e60e839",
                            ConcurrencyStamp = "b76b94e1-20d0-469f-8b78-1bcd06a3e76d",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Khách hàng",
                            IsActive = true,
                            Name = "customer",
                            NormalizedName = "CUSTOMER",
                            Protected = true
                        });
                });

            modelBuilder.Entity("App.BookingOnline.Data.Identity.AspUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Identity.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Identity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Identity.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Identity.UserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("BookingCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("BookingSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BookingType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("C_Course_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("C_Org_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cancel_Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid?>("Cancel_Reason_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Cancel_Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cancel_User")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Confirm_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Confirm_Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Confirm_Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Confirm_User")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("DateId")
                        .HasColumnType("date");

                    b.Property<string>("Device_Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("End_Time")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GF_Booking_Session_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("Is_NoShow")
                        .HasColumnType("bit");

                    b.Property<Guid?>("M_Promotion_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Payment_Time")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Start_Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Tee_Time")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateNoShow_Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateNoShow_UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BookingSessionId");

                    b.HasIndex("C_Course_Id");

                    b.HasIndex("C_Org_Id");

                    b.HasIndex("Cancel_Reason_Id");

                    b.HasIndex("M_Promotion_Id");

                    b.ToTable("GF_Booking");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.BookingLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("BookingStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("C_Org_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Caddie_No")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CardNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("DateId")
                        .HasColumnType("date");

                    b.Property<decimal?>("Deposit_Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal?>("Discount_Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Discount_Value")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("FlightSeq")
                        .HasColumnType("int");

                    b.Property<Guid>("GF_Booking_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Golf_Price_Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Golf_Promotion_Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Golf_Promotion_Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Hole")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("Is_NoShow")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MB_CustomerGroup_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Net_Ammount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Part")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("Promotion_Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Public_Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("StartTee")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Tee_Time")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Total_Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TurnLength")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateNoShow_Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateNoShow_UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("GF_Booking_Id");

                    b.HasIndex("MB_CustomerGroup_Id");

                    b.ToTable("GF_BookingLine");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.BookingOtherType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("C_Org_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("C_Org_Id");

                    b.ToTable("C_Booking_OtherType");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.BookingSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("BookingCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BookingType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("C_Course_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("C_Org_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("DateId")
                        .HasColumnType("date");

                    b.Property<string>("Device_Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("End_Time")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("M_Promotion_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Start_Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Tee_Time")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("C_Course_Id");

                    b.HasIndex("C_Org_Id");

                    b.HasIndex("M_Promotion_Id");

                    b.ToTable("GF_BookingSession");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.BookingSessionLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BookingCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BookingSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookingSessionsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateId")
                        .HasColumnType("datetime2");

                    b.Property<string>("Device_Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("End_Time")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Start_Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Tee_Time")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookingSessionId");

                    b.ToTable("BookingSessionLine");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.BookingSpecialRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("C_Booking_OtherType_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("C_Org_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid>("GF_Booking_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("C_Booking_OtherType_Id");

                    b.HasIndex("C_Org_Id");

                    b.HasIndex("GF_Booking_Id");

                    b.ToTable("GF_Booking_SpecialRequest");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.CancelReason", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("C_Org_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("C_Org_Id");

                    b.ToTable("C_CancelReason");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.Common.GF_Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("C_Org_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUser")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Img_Url")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Message_Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message_Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Message_Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("Sent_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Sent_User")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("C_Org_Id");

                    b.ToTable("GF_Notification");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.Common.Hotline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("C_Hotline");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.Common.M_Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("ApplyTime_From")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ApplyTime_To")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid?>("C_Org_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUser")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DOW")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("End_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Img_Url")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHotPromotion")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Priotity")
                        .HasColumnType("int");

                    b.Property<string>("PromotionCode")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("PromotionPrice_Percent")
                        .HasColumnType("int");

                    b.Property<string>("Promotion_Formula")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Promotion_Type")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("Promotion_Value")
                        .HasColumnType("int");

                    b.Property<int?>("PublicPrice_Percent")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Start_Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("C_Org_Id");

                    b.ToTable("M_Promotion");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.Common.M_Promotion_Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("C_Course_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUser")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("M_Promotion_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("C_Course_Id");

                    b.HasIndex("M_Promotion_Id");

                    b.ToTable("M_Promotion_Course");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.Common.M_Promotion_CustomerGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("C_Org_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUser")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MB_CustomerGroup_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("M_Promotion_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("C_Org_Id");

                    b.HasIndex("MB_CustomerGroup_Id");

                    b.HasIndex("M_Promotion_Id");

                    b.ToTable("M_Promotion_CustomerGroup");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.ContactSupport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("C_ContactSupport");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("C_Org_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("EmailSupport")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NoteSupport")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("OrderValue")
                        .HasColumnType("int");

                    b.Property<string>("PhoneSupport")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TimeSupport")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("C_Org_Id");

                    b.ToTable("C_Course");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("AvatarFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMember")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LowerFullName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("MB_Customer");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.CustomerGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("C_Org_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrderValue")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("C_Org_Id");

                    b.ToTable("MB_CustomerGroup");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.CustomerGroupMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("C_Org_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Golf_Code")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MB_CustomerGroup_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("MB_CustomerGroup_Id");

                    b.ToTable("MB_CustomerGroup_Mapping");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.Golf.GF_CourseTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("C_Org_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedUser")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DOW")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("OrgName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("C_Org_Id");

                    b.ToTable("GF_CourseTemplate");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.Golf.GF_CourseTemplateLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("C_Course_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("C_Org_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedUser")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EndTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlightSeq")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GF_CourseTemplate_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Hole")
                        .HasColumnType("int");

                    b.Property<int?>("Interval")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxTurnLength")
                        .HasColumnType("int");

                    b.Property<string>("OrgName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Part")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StartTee")
                        .HasColumnType("int");

                    b.Property<string>("StartTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TurnLength")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("C_Course_Id");

                    b.HasIndex("GF_CourseTemplate_Id");

                    b.ToTable("GF_CourseTemplateLine");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.Holiday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("C_Org_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("DateId")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("C_Org_Id");

                    b.ToTable("C_Holiday");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.LockReason", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("C_Org_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("C_Org_Id");

                    b.ToTable("C_LockReason");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.MemberCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("C_Org_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Golf_Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Golf_CardNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Golf_CardStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Golf_DOB")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Golf_Effective_Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Golf_Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("Golf_Expire_Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Golf_FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Golf_IDNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Golf_IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("Golf_IsLock")
                        .HasColumnType("bit");

                    b.Property<string>("Golf_MemberCardId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Golf_Mobilephone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MB_CustomerGroup_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MB_Customer_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("C_Org_Id");

                    b.HasIndex("MB_CustomerGroup_Id");

                    b.HasIndex("MB_Customer_Id");

                    b.ToTable("MB_MemberCard");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.MemberCardCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("C_Course_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid?>("MB_CustomerGroup_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MC_MemberCard_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("C_Course_Id");

                    b.HasIndex("MB_CustomerGroup_Id");

                    b.HasIndex("MC_MemberCard_Id");

                    b.ToTable("MB_MemberCard_Course");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.MemberRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("C_Org_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("Request_Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Request_Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Responsed_Date")
                        .HasColumnType("date");

                    b.Property<string>("Responsed_Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Responsed_User")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("C_Org_Id");

                    b.ToTable("MB_MemberRequest");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TranslateKey")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Url")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("App_Menu");

                    b.HasData(
                        new
                        {
                            Id = new Guid("31f946a1-56cc-465d-a10d-20aae1d4f34e"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedUser = "admin",
                            DisplayOrder = -1,
                            IsActive = true,
                            Level = -1,
                            Name = "ROOT"
                        });
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("C_OrgType_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSummary")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrderValue")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("C_OrgType_Id");

                    b.ToTable("C_Org");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.OrganizationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("C_Org_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InvoiceAddress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("InvoiceBankAccount")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InvoiceBankName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("InvoiceName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ShortAddress")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TaxCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telephone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Website")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("C_Org_Id");

                    b.ToTable("C_OrgInfo");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.OrganizationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("C_OrgType");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.PaymentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("C_Org_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("C_Org_Id");

                    b.ToTable("C_PaymentType");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.RoleMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("AspRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("AspRoleId");

                    b.HasIndex("MenuId");

                    b.ToTable("App_Role_Menu_Ref");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.Sequence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DocumentType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxLength")
                        .HasColumnType("int");

                    b.Property<string>("Prefix")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SequenceType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("App_Sequence");

                    b.HasData(
                        new
                        {
                            Id = new Guid("efb6f443-337c-4f7e-afa9-328bec063f21"),
                            CreatedDate = new DateTime(2021, 12, 21, 10, 46, 12, 243, DateTimeKind.Local).AddTicks(9686),
                            CreatedUser = "admin",
                            DocumentType = "CUSTOMERCODE",
                            IsActive = true,
                            MaxLength = 6,
                            Prefix = "GA"
                        });
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.SequenceLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("App_Sequence_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("DateId")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("MonthValue")
                        .HasColumnType("int");

                    b.Property<int>("SeqValue")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("YearValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("App_Sequence_Id");

                    b.ToTable("App_SequenceLine");

                    b.HasData(
                        new
                        {
                            Id = new Guid("59bfc647-ef93-4af4-aaf0-4c49272a975b"),
                            App_Sequence_Id = new Guid("efb6f443-337c-4f7e-afa9-328bec063f21"),
                            CreatedDate = new DateTime(2021, 12, 21, 10, 46, 12, 251, DateTimeKind.Local).AddTicks(5900),
                            CreatedUser = "admin",
                            IsActive = true,
                            SeqValue = 0,
                            YearValue = 2021
                        });
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Value")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("App_Setting");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.TeeSheetLock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("C_LockReason_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("C_Org_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LockStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LockType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("C_LockReason_Id");

                    b.HasIndex("C_Org_Id");

                    b.ToTable("GF_TeeSheetLock");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.TeeSheetLockLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("C_Course_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("C_Org_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DOW")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EndTime")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime?>("EndTimeValue")
                        .HasColumnType("datetime2");

                    b.Property<string>("FlightSeq")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("GF_TeeSheetLock_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("StartTee")
                        .HasColumnType("int");

                    b.Property<string>("StartTime")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime?>("StartTimeValue")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("C_Course_Id");

                    b.HasIndex("GF_TeeSheetLock_Id");

                    b.ToTable("GF_TeeSheetLockLine");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.UploadFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("FileSize")
                        .HasColumnType("int");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("App_UploadFile");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("C_Org_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("C_Org_Id");

                    b.ToTable("App_User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e45a2214-25aa-4f42-8d91-5aee48ab1c20"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@brggroup.vn",
                            FullName = "Admin",
                            IsActive = true,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("App.BookingOnline.Data.Identity.AspUserRole", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Identity.AspRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.BookingOnline.Data.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.BookingOnline.Data.Identity.RoleClaim", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Identity.AspRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.BookingOnline.Data.Identity.UserClaim", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.BookingOnline.Data.Identity.UserLogin", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.BookingOnline.Data.Identity.UserToken", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.Booking", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Models.BookingSession", "BookingSession")
                        .WithMany()
                        .HasForeignKey("BookingSessionId");

                    b.HasOne("App.BookingOnline.Data.Models.Course", "Course")
                        .WithMany("Bookings")
                        .HasForeignKey("C_Course_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.BookingOnline.Data.Models.Organization", "Organization")
                        .WithMany("Bookings")
                        .HasForeignKey("C_Org_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.BookingOnline.Data.Models.CancelReason", "CancelReason")
                        .WithMany("Bookings")
                        .HasForeignKey("Cancel_Reason_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.BookingOnline.Data.Models.Common.M_Promotion", "Promotion")
                        .WithMany("Bookings")
                        .HasForeignKey("M_Promotion_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BookingSession");

                    b.Navigation("CancelReason");

                    b.Navigation("Course");

                    b.Navigation("Organization");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.BookingLine", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Models.Booking", "Booking")
                        .WithMany("BookingLines")
                        .HasForeignKey("GF_Booking_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.BookingOnline.Data.Models.CustomerGroup", "CustomerGroup")
                        .WithMany("BookingLines")
                        .HasForeignKey("MB_CustomerGroup_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Booking");

                    b.Navigation("CustomerGroup");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.BookingOtherType", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Models.Organization", "Organization")
                        .WithMany("BookingOtherTypes")
                        .HasForeignKey("C_Org_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.BookingSession", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Models.Course", "Course")
                        .WithMany("BookingSessions")
                        .HasForeignKey("C_Course_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.BookingOnline.Data.Models.Organization", "Organization")
                        .WithMany("BookingSessions")
                        .HasForeignKey("C_Org_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.BookingOnline.Data.Models.Common.M_Promotion", "M_Promotion")
                        .WithMany("BookingSessions")
                        .HasForeignKey("M_Promotion_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Course");

                    b.Navigation("M_Promotion");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.BookingSessionLine", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Models.BookingSession", "BookingSession")
                        .WithMany("BookingSessionLines")
                        .HasForeignKey("BookingSessionId");

                    b.Navigation("BookingSession");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.BookingSpecialRequest", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Models.BookingOtherType", "BookingOtherType")
                        .WithMany("BookingSpecialRequests")
                        .HasForeignKey("C_Booking_OtherType_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.BookingOnline.Data.Models.Organization", "Organization")
                        .WithMany("BookingSpecialRequests")
                        .HasForeignKey("C_Org_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.BookingOnline.Data.Models.Booking", "Booking")
                        .WithMany("BookingSpecialRequests")
                        .HasForeignKey("GF_Booking_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("BookingOtherType");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.CancelReason", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Models.Organization", "Organization")
                        .WithMany("CancelReasons")
                        .HasForeignKey("C_Org_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.Common.GF_Notification", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Models.Organization", "Organization")
                        .WithMany("Notification")
                        .HasForeignKey("C_Org_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.Common.M_Promotion", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Models.Organization", "Organization")
                        .WithMany("Promotion")
                        .HasForeignKey("C_Org_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.Common.M_Promotion_Course", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Models.Course", "Course")
                        .WithMany("PromotionCourse")
                        .HasForeignKey("C_Course_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.BookingOnline.Data.Models.Common.M_Promotion", "Promotion")
                        .WithMany("PromotionCourse")
                        .HasForeignKey("M_Promotion_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Course");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.Common.M_Promotion_CustomerGroup", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Models.Organization", "Organization")
                        .WithMany("PromotionCustomerGroup")
                        .HasForeignKey("C_Org_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.BookingOnline.Data.Models.CustomerGroup", "CustomerGroup")
                        .WithMany("PromotionCustomerGroup")
                        .HasForeignKey("MB_CustomerGroup_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.BookingOnline.Data.Models.Common.M_Promotion", "Promotion")
                        .WithMany("PromotionCustomerGroup")
                        .HasForeignKey("M_Promotion_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CustomerGroup");

                    b.Navigation("Organization");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.ContactSupport", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.Course", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Models.Organization", "Organization")
                        .WithMany("Courses")
                        .HasForeignKey("C_Org_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.CustomerGroup", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Models.Organization", "Organization")
                        .WithMany("CustomerGroups")
                        .HasForeignKey("C_Org_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.CustomerGroupMapping", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Models.CustomerGroup", "CustomerGroup")
                        .WithMany("CustomerGroupMappings")
                        .HasForeignKey("MB_CustomerGroup_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerGroup");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.Golf.GF_CourseTemplate", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Models.Organization", "Organization")
                        .WithMany("GF_CourseTemplates")
                        .HasForeignKey("C_Org_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.Golf.GF_CourseTemplateLine", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Models.Course", "Course")
                        .WithMany("GF_CourseTemplateLine")
                        .HasForeignKey("C_Course_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.BookingOnline.Data.Models.Golf.GF_CourseTemplate", "GF_CourseTemplate")
                        .WithMany("GF_CourseTemplateLines")
                        .HasForeignKey("GF_CourseTemplate_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("GF_CourseTemplate");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.Holiday", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Models.Organization", "Organization")
                        .WithMany("Holidays")
                        .HasForeignKey("C_Org_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.LockReason", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Models.Organization", "Organization")
                        .WithMany("LockReasons")
                        .HasForeignKey("C_Org_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.MemberCard", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Models.Organization", "Organization")
                        .WithMany("MemberCards")
                        .HasForeignKey("C_Org_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.BookingOnline.Data.Models.CustomerGroup", "CustomerGroup")
                        .WithMany("MemberCards")
                        .HasForeignKey("MB_CustomerGroup_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.BookingOnline.Data.Models.Customer", "Customer")
                        .WithMany("MemberCards")
                        .HasForeignKey("MB_Customer_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("CustomerGroup");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.MemberCardCourse", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Models.Course", "Course")
                        .WithMany("MemberCardCourses")
                        .HasForeignKey("C_Course_Id");

                    b.HasOne("App.BookingOnline.Data.Models.CustomerGroup", "CustomerGroup")
                        .WithMany("MemberCardCourses")
                        .HasForeignKey("MB_CustomerGroup_Id");

                    b.HasOne("App.BookingOnline.Data.Models.MemberCard", "MemberCard")
                        .WithMany("MemberCardCourses")
                        .HasForeignKey("MC_MemberCard_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("CustomerGroup");

                    b.Navigation("MemberCard");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.MemberRequest", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Models.Organization", "Organization")
                        .WithMany("MemberRequests")
                        .HasForeignKey("C_Org_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.Organization", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Models.OrganizationType", "OrganizationType")
                        .WithMany("Organizations")
                        .HasForeignKey("C_OrgType_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrganizationType");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.OrganizationInfo", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Models.Organization", "Organization")
                        .WithMany("OrganizationInfos")
                        .HasForeignKey("C_Org_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.PaymentType", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Models.Organization", "Organization")
                        .WithMany("PaymentTypes")
                        .HasForeignKey("C_Org_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.RoleMenu", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Identity.AspRole", "Role")
                        .WithMany("RoleMenus")
                        .HasForeignKey("AspRoleId");

                    b.HasOne("App.BookingOnline.Data.Models.Menu", "Menu")
                        .WithMany("RoleMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.SequenceLine", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Models.Sequence", "Sequence")
                        .WithMany("SequenceLines")
                        .HasForeignKey("App_Sequence_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sequence");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.TeeSheetLock", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Models.LockReason", "LockReason")
                        .WithMany("TeeSheetLocks")
                        .HasForeignKey("C_LockReason_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.BookingOnline.Data.Models.Organization", "Organization")
                        .WithMany("TeeSheetLocks")
                        .HasForeignKey("C_Org_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LockReason");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.TeeSheetLockLine", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Models.Course", "Course")
                        .WithMany("TeeSheetLockLines")
                        .HasForeignKey("C_Course_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.BookingOnline.Data.Models.TeeSheetLock", "TeeSheetLock")
                        .WithMany("TeeSheetLockLines")
                        .HasForeignKey("GF_TeeSheetLock_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("TeeSheetLock");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.User", b =>
                {
                    b.HasOne("App.BookingOnline.Data.Models.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("C_Org_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Identity.AspRole", b =>
                {
                    b.Navigation("RoleMenus");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.Booking", b =>
                {
                    b.Navigation("BookingLines");

                    b.Navigation("BookingSpecialRequests");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.BookingOtherType", b =>
                {
                    b.Navigation("BookingSpecialRequests");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.BookingSession", b =>
                {
                    b.Navigation("BookingSessionLines");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.CancelReason", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.Common.M_Promotion", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("BookingSessions");

                    b.Navigation("PromotionCourse");

                    b.Navigation("PromotionCustomerGroup");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.Course", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("BookingSessions");

                    b.Navigation("GF_CourseTemplateLine");

                    b.Navigation("MemberCardCourses");

                    b.Navigation("PromotionCourse");

                    b.Navigation("TeeSheetLockLines");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.Customer", b =>
                {
                    b.Navigation("MemberCards");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.CustomerGroup", b =>
                {
                    b.Navigation("BookingLines");

                    b.Navigation("CustomerGroupMappings");

                    b.Navigation("MemberCardCourses");

                    b.Navigation("MemberCards");

                    b.Navigation("PromotionCustomerGroup");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.Golf.GF_CourseTemplate", b =>
                {
                    b.Navigation("GF_CourseTemplateLines");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.LockReason", b =>
                {
                    b.Navigation("TeeSheetLocks");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.MemberCard", b =>
                {
                    b.Navigation("MemberCardCourses");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.Menu", b =>
                {
                    b.Navigation("RoleMenus");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.Organization", b =>
                {
                    b.Navigation("BookingOtherTypes");

                    b.Navigation("Bookings");

                    b.Navigation("BookingSessions");

                    b.Navigation("BookingSpecialRequests");

                    b.Navigation("CancelReasons");

                    b.Navigation("Courses");

                    b.Navigation("CustomerGroups");

                    b.Navigation("GF_CourseTemplates");

                    b.Navigation("Holidays");

                    b.Navigation("LockReasons");

                    b.Navigation("MemberCards");

                    b.Navigation("MemberRequests");

                    b.Navigation("Notification");

                    b.Navigation("OrganizationInfos");

                    b.Navigation("PaymentTypes");

                    b.Navigation("Promotion");

                    b.Navigation("PromotionCustomerGroup");

                    b.Navigation("TeeSheetLocks");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.OrganizationType", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.Sequence", b =>
                {
                    b.Navigation("SequenceLines");
                });

            modelBuilder.Entity("App.BookingOnline.Data.Models.TeeSheetLock", b =>
                {
                    b.Navigation("TeeSheetLockLines");
                });
#pragma warning restore 612, 618
        }
    }
}
